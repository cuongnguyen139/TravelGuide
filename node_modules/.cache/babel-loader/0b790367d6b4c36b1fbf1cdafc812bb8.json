{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeOut = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const auth = (email, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    axios.post(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBkrfTswnae6QoKwM1vLoANEQZ8nBYGMNk\", authData).then(response => {\n      const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n      localStorage.setItem(\"token\", response.data.idToken);\n      localStorage.setItem(\"expirationDate\", expirationDate);\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n      dispatch(checkAuthTimeOut(response.data.expiresIn));\n    }).catch(err => {\n      dispatch(authFail(err.response.data.error));\n    });\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n\n      if (expirationDate < new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess());\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/cuong/react_projects/my-app-auth/src/store/actions/auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","idToken","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeOut","expirationTime","dispatch","setTimeout","authFail","error","AUTH_FAIL","auth","email","password","authData","returnSecureToken","post","then","response","expirationDate","Date","getTime","data","expiresIn","setItem","localId","catch","err","authCheckState","getItem"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\n\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId\n  };\n};\n\nexport const logout = () => {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\n\nexport const checkAuthTimeOut = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\n\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\n\nexport const auth = (email, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    axios\n      .post(\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBkrfTswnae6QoKwM1vLoANEQZ8nBYGMNk\",\n        authData\n      )\n      .then(response => {\n        const expirationDate = new Date(\n          new Date().getTime() + response.data.expiresIn * 1000\n        );\n        localStorage.setItem(\"token\", response.data.idToken);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        dispatch(authSuccess(response.data.idToken, response.data.localId));\n        dispatch(checkAuthTimeOut(response.data.expiresIn));\n      })\n      .catch(err => {\n        dispatch(authFail(err.response.data.error));\n      });\n  };\n};\n\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n      if (expirationDate < new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess());\n      }\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}